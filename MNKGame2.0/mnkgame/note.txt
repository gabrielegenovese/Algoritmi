
Così funziona abbastanza bene quando è primo.
Quando è secondo fa delle bizze: guardare meglio come si comporta quando è secondo.

Funzioni che non servono più:

// crea n livelli di un game tree
public Albero createGameTree(Albero T, int depth) {

    if (depth == 0) return T;

    MNKBoard B = T.getValue();
    MNKCell[] FC = removeUselessCell(B);

    for (int i = 0; i < FC.length; i++) {
        //dublico la board -> inefficiente a livello di spazio
        MNKBoard tmp = new MNKBoard(B.M,B.N,B.K);
        MNKCell[] MC = B.getMarkedCells();
        for(MNKCell m : MC)
            tmp.markCell(m.i,m.j);
        //inserisco la mossa
        tmp.markCell(FC[i].i,FC[i].j);
        Albero child = T.addChild(tmp);

        //se la partita non e' finita vado avanti nella creazione dell'albero
        if(tmp.gameState() == MNKGameState.OPEN)
            createGameTree(child,depth-1);
    }
    return T;
}

public void printTree(Albero T, String ramo) {
    System.out.println(ramo+T);
    MNKCell[] FC = T.getValue().getFreeCells();
    System.out.println(ramo+FC.length);
    if(!T.isLeaf()){
        for(Albero R : T.getChildren())
            printTree(R,ramo+" ");
    }
}

public void printArray(MNKCell [] F) {
    System.out.println("Lunghezza: " + F.length);
    for (int i = 0; i < F.length; i++)
        System.out.println(" Cella: " + F[i]);
}